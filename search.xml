<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 安装、配置及使用命令</title>
      <link href="/09b7b61305e4/"/>
      <url>/09b7b61305e4/</url>
      
        <content type="html"><![CDATA[<h1 id="Git下载安装"><a href="#Git下载安装" class="headerlink" title="Git下载安装"></a>Git下载安装</h1><blockquote><p> 下载：<a href="https://git-scm.com/">git官网下载</a></p><p> 安装：按照提示安装即可</p><p> <strong>注意</strong>：安装后，如果使用ssh出现连接失败的问题，可以配置环境变量<code> GIT_SSH</code>指定ssh的位置，参考</p><p> <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">10.8 Git 内部原理 - 环境变量</a></p><p> 文档：<a href="https://git-scm.com/book/zh/v2">官方中文</a></p></blockquote><h1 id="Git基本环境配置"><a href="#Git基本环境配置" class="headerlink" title="Git基本环境配置"></a>Git基本环境配置</h1><h2 id="查看git设置"><a href="#查看git设置" class="headerlink" title="查看git设置"></a>查看git设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看git配置</span></span><br><span class="line">git config -l</span><br><span class="line">git config --list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全局用户配置</span></span><br><span class="line">git config --global -l</span><br></pre></td></tr></table></figure><h2 id="修改git配置设置"><a href="#修改git配置设置" class="headerlink" title="修改git配置设置"></a>修改git配置设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑Git配置文件</span></span><br><span class="line">git config -e [--global]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置提交的用户信息用户名</span></span><br><span class="line">git config --global user.name &quot;姓名&quot;  </span><br><span class="line">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure><h2 id="其它git配置设置"><a href="#其它git配置设置" class="headerlink" title="其它git配置设置"></a>其它git配置设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git可以将用户名，密码和仓库链接保存在硬盘中，而不用在每次push的时候都输入密码</span></span><br><span class="line">git config credential.helper store</span><br><span class="line"><span class="comment"># 解决 Git 默认不区分文件名大小写的问题</span></span><br><span class="line">git config core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前目录新建一个Git代码库</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">git init &lt;project-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载一个项目和它的整个代码历史</span></span><br><span class="line">git clone &lt;url&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只拉取最近一次提交记录，用于快速<span class="built_in">clone</span>代码仓库</span></span><br><span class="line">git clone --depth 1 &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交工作区所有修改到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区修改到仓库区</span></span><br><span class="line">git commit -m &lt;message&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取远程仓库最新代码，并与本地分支合并，该命令相当于执行 git fetch &amp;&amp; git merge</span></span><br><span class="line">git pull &lt;repo&gt; &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地指定分支到远程仓库</span></span><br><span class="line">git push &lt;repo&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="查看代码信息"><a href="#查看代码信息" class="headerlink" title="查看代码信息"></a>查看代码信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看工作区变更的文件</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交日志</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交记录(更简洁)，该命令可以查看最近90天的git操作记录，关键时刻可以救命（比如，使用了 git reset --hard &lt;commit-sha&gt; 后找不到commit-sha后面的提交记录和代码了）</span></span><br><span class="line">git reflog</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看工作区余暂存区修改文件具体差异</span></span><br><span class="line">git diff</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地项目关联远程仓库地址</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个分支本地、origin、up远程仓库当前的commit-sha，可用于对比三者代码是不是最新的</span></span><br><span class="line">git show-ref &lt;branch-name&gt; # 使用之前先执行 `git fetch --all` 拉取最新资源到本地</span><br></pre></td></tr></table></figure><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前分支名称</span></span><br><span class="line">git rev-parse --abbrev-ref HEAD # 低版本git获取当前分支名称</span><br><span class="line">git branch --show-current # 高版本git获取当前分支名称</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建分支</span></span><br><span class="line">git branch &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换分支, 将HEAD指向&lt;branch-name&gt;</span></span><br><span class="line">git checkout &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换并关联到upstream上游仓库</span></span><br><span class="line">git checkout --track &lt;repo&gt;/&lt;branch-name&gt; # git checkout --track up/Release_IEP-WEBSITE-3.40.0_92224</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改本地分支的关联仓库</span></span><br><span class="line">git branch --set-upstream-to &lt;repo&gt;/&lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 + 切换分支</span></span><br><span class="line">git checkout -b &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两个分支来回切换，快捷方式</span></span><br><span class="line">git checkout -</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地分支(已merge过分支)</span></span><br><span class="line">git branch  -d &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地分支(为merge的分支)</span></span><br><span class="line">git branch  -D &lt;branch-name&gt; # 相当于 --delete --force</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程仓库分支</span></span><br><span class="line">git push -d &lt;repo&gt; &lt;branch-name&gt; # 或者 git push &lt;repo&gt; :&lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并某本地分支到当前分支</span></span><br><span class="line">git merge &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并某远程分支到当前分支 示例：git merge origin/dev</span></span><br><span class="line">git merge &lt;repo&gt;/&lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用pull合并某远程分支到当前分支</span></span><br><span class="line">git pull &lt;repo&gt; &lt;branch-name&gt; # 等同于 git fetch &lt;repo&gt; &amp;&amp; git merge &lt;repo&gt;/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="撤销和回退操作"><a href="#撤销和回退操作" class="headerlink" title="撤销和回退操作"></a>撤销和回退操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销本地所有修改（新创建的文件不会被撤销）</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">撤销本地新创建的文件（已存在文件的内容修改不会被撤销）</span></span><br><span class="line">git clean -f</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从暂存区回退到工作区</span></span><br><span class="line">git reset HEAD filename # 指定文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退暂存区所有文件到工作区</span></span><br><span class="line">git reset HEAD .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到某次提交</span></span><br><span class="line">git reset &lt;commit-sha&gt; # 默认是 --mixed 回退的代码保留在工作区</span><br><span class="line">git reset --mixed &lt;commit-sha&gt; # 回退的代码保留在工作区</span><br><span class="line">git reset --soft &lt;commit-sha&gt; # 回退的代码保留在暂存区</span><br><span class="line">git reset --hard &lt;commit-sha&gt; # 回退的代码不保留，该命令要谨慎操作</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">git reset --hard</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到某次提交版本</span></span><br><span class="line">git reset --hard &lt;commit-sha&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分支当前版本commit SHA</span></span><br><span class="line">git rev-parse HEAD</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交回退的版本 (注：强制提交后，当前版本后面的提交版本将会删掉！)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git push -f</span></span><br><span class="line">git push origin HEAD --force</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git revert和git reset的区别：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前者只会创建一次新的提交（不会重置和更改原有的提交记录）而且只是撤销某一次提交</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后者则会回退某一次提交记录之后的所有提交（会重置和更改历史提交记录，如果回退的提交已经pull到远程，回退以后push到远程必须使用强制推送 --force）</span></span><br><span class="line">git revert &lt;commit-sha&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝应用某些已经存在的提交</span></span><br><span class="line">git cherry-pick &lt;commit-sha&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分支合并有冲突，选择中止分支合并操作</span></span><br><span class="line">git merge --abort</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">中止变基操作</span></span><br><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h2 id="git储藏常用命令"><a href="#git储藏常用命令" class="headerlink" title="git储藏常用命令"></a>git储藏常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">储藏修改，将新的储藏推送到栈上，运行 git stash 或 git stash save</span></span><br><span class="line">git stash</span><br><span class="line">git stash save &quot;save message&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从git栈中获取到最近一次stash进去的内容，恢复工作区的内容。获取之后，会删除栈中对应的stash</span></span><br><span class="line">git stash pop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要查看储藏的东西，可以使用 git stash list</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将你刚刚储藏的工作重新应用：git stash apply。 如果想要应用其中一个更旧的储藏，可以通过名字指定它，像这样：git stash apply stash@&#123;2&#125;。 如果不指定一个储藏，Git 认为指定的是最近的储藏</span></span><br><span class="line">git stash apply</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据版本号，恢复储藏信息</span></span><br><span class="line">git stash apply stash@&#123;1&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要移除它，你可以运行 git stash drop，加上你希望移除的储藏的名字</span></span><br><span class="line">git stash drop stash@&#123;0&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清空git储藏栈</span></span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h2 id="git切换远程仓库地址"><a href="#git切换远程仓库地址" class="headerlink" title="git切换远程仓库地址"></a>git切换远程仓库地址</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地项目关联远程仓库地址</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除origin关联的远程仓库地址</span></span><br><span class="line">git remote remove origin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重命名关联仓库名称</span></span><br><span class="line">git remote rename &lt;repo&gt; &lt;new-repo&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加远程仓库新地址</span></span><br><span class="line">git remote add origin &lt;url&gt;</span><br></pre></td></tr></table></figure><h2 id="git获取不到gitLab创建的新分支"><a href="#git获取不到gitLab创建的新分支" class="headerlink" title="git获取不到gitLab创建的新分支"></a>git获取不到gitLab创建的新分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程主机的最新内容拉到本地</span></span><br><span class="line">git fetch</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取所有远程分支并清除远程仓库已删除的分支</span></span><br><span class="line">git fetch --prune</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看对应分支的commit-sha</span></span><br><span class="line">git show-ref &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="fork模式切换新分支"><a href="#fork模式切换新分支" class="headerlink" title="fork模式切换新分支"></a>fork模式切换新分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取远程私仓库（origin）和远程公仓库（up/upstream）代码、分支、tag等信息，该命令只是拉取，并未进行合并操作，所以不会又冲突（git pull命令等于git fetch &amp;&amp; git merge）</span></span><br><span class="line">git fetch --all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取远程公仓的分支后就可以切换分支了</span></span><br><span class="line">git checkout &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送本地代码到远程私仓之前，先拉取更新远程公仓的代码，看是否有冲突</span></span><br><span class="line">git pull up/upstream &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送本地代码到远程私仓</span></span><br><span class="line">git push origin &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后在gitlab发起merge request代码合并请求</span></span><br></pre></td></tr></table></figure><h2 id="修改提交信息"><a href="#修改提交信息" class="headerlink" title="修改提交信息"></a>修改提交信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改最新commit提交信息</span></span><br><span class="line">git commit --amend</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改某次历史commit提交信息</span></span><br><span class="line">git rebase -i father-commit-sha # 要修改历史提交信息的前一次commit-sha</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改第一个commit的提交信息</span></span><br><span class="line">git rebase -i --root</span><br></pre></td></tr></table></figure><h2 id="解决-Git-默认不区分文件名大小写的问题"><a href="#解决-Git-默认不区分文件名大小写的问题" class="headerlink" title="解决 Git 默认不区分文件名大小写的问题"></a>解决 Git 默认不区分文件名大小写的问题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.ignorecase false</span><br></pre></td></tr></table></figure><h2 id="git清理不必要的文件和优化本地仓库内存"><a href="#git清理不必要的文件和优化本地仓库内存" class="headerlink" title="git清理不必要的文件和优化本地仓库内存"></a>git清理不必要的文件和优化本地仓库内存</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc</span><br></pre></td></tr></table></figure><h2 id="git导出某个时间段的代码提交记录到桌面"><a href="#git导出某个时间段的代码提交记录到桌面" class="headerlink" title="git导出某个时间段的代码提交记录到桌面"></a>git导出某个时间段的代码提交记录到桌面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在项目根目录，执行以下命令</span></span><br><span class="line">git log --all --after=&quot;&lt;date&gt; 00:00&quot; --before=&quot;&lt;date&gt; 23:59&quot; --author=&quot;&lt;author&gt;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出最近一年的格式化的git提交记录</span></span><br><span class="line">git log --pretty=format:&quot;%ad - %an: %s&quot; --after=&quot;2018-01-31&quot; --until=&quot;2019-01-31&quot; --author=&quot;liaolongdong&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出txt文档</span></span><br><span class="line">git log --pretty=format:&quot;%ad - %an: %s&quot; --after=&quot;2018-01-31&quot; --until=&quot;2019-01-31&quot; --author=&quot;liaolongdong&quot; &gt;&gt; ~/Desktop/commit.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出excel</span></span><br><span class="line">git log --date=iso --pretty=format:&#x27;&quot;%h&quot; &quot;%an&quot; &quot;%ad&quot; &quot;%s&quot;&#x27; --after=&quot;2018-01-31&quot; --until=&quot;2021-03-31&quot; --author=&quot;liaolongdong&quot; &gt;&gt; ~/Desktop/commit.csv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
